[{"F:\\web\\react\\codeforces-api\\src\\index.tsx":"1","F:\\web\\react\\codeforces-api\\src\\reportWebVitals.tsx":"2","F:\\web\\react\\codeforces-api\\src\\App.tsx":"3","F:\\web\\react\\codeforces-api\\src\\components\\Menu.tsx":"4","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.tsx":"5","F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.tsx":"6","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.tsx":"7","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.tsx":"8","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.tsx":"9","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.tsx":"10","F:\\web\\react\\codeforces-api\\src\\util\\constants.ts":"11","F:\\web\\react\\codeforces-api\\src\\util\\bashforces.ts":"12","F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.ts":"13","F:\\web\\react\\codeforces-api\\src\\data\\store.ts":"14","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.ts":"15","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.ts":"16","F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.ts":"17","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.ts":"18","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.ts":"19","F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.ts":"20","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\appReducers.ts":"21"},{"size":737,"mtime":1618228219143,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1617775898144,"results":"24","hashOfConfig":"23"},{"size":2260,"mtime":1618396498604,"results":"25","hashOfConfig":"23"},{"size":3116,"mtime":1618398006765,"results":"26","hashOfConfig":"23"},{"size":16217,"mtime":1617776793131,"results":"27","hashOfConfig":"23"},{"size":1147,"mtime":1617776182849,"results":"28","hashOfConfig":"23"},{"size":12254,"mtime":1617776693590,"results":"29","hashOfConfig":"23"},{"size":1838,"mtime":1617856239521,"results":"30","hashOfConfig":"23"},{"size":1524,"mtime":1617880137841,"results":"31","hashOfConfig":"23"},{"size":6313,"mtime":1618229880067,"results":"32","hashOfConfig":"23"},{"size":410,"mtime":1617879429205,"results":"33","hashOfConfig":"23"},{"size":1598,"mtime":1617881560224,"results":"34","hashOfConfig":"23"},{"size":756,"mtime":1617879442885,"results":"35","hashOfConfig":"23"},{"size":3390,"mtime":1618230457918,"results":"36","hashOfConfig":"23"},{"size":2898,"mtime":1618229652501,"results":"37","hashOfConfig":"23"},{"size":3530,"mtime":1617881095074,"results":"38","hashOfConfig":"23"},{"size":5088,"mtime":1618229644177,"results":"39","hashOfConfig":"23"},{"size":2555,"mtime":1617882369116,"results":"40","hashOfConfig":"23"},{"size":2107,"mtime":1618230560652,"results":"41","hashOfConfig":"23"},{"size":1231,"mtime":1617881099452,"results":"42","hashOfConfig":"23"},{"size":957,"mtime":1618232657827,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1flmqtp",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"46"},"F:\\web\\react\\codeforces-api\\src\\index.tsx",[],["97","98"],"F:\\web\\react\\codeforces-api\\src\\reportWebVitals.tsx",[],["99","100"],"F:\\web\\react\\codeforces-api\\src\\App.tsx",["101","102","103","104","105"],"F:\\web\\react\\codeforces-api\\src\\components\\Menu.tsx",["106","107","108","109","110","111","112","113","114","115","116"],"F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemPage.tsx",["117","118","119"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getRandomInteger, parseQuery } from \"../../util/bashforces\";\r\nimport { sortByRating, sortBySolveCount } from \"../../util/sortMethods\";\r\nimport {\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_PROBLEMS,\r\n  SEARCH,\r\n  PROBLEMS,\r\n} from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport ProblemList from \"./ProblemList\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faSort,\r\n  faSortDown,\r\n  faSortUp,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst ProblemPage = () => {\r\n  const state = useSelector((state) => state);\r\n  const history = useHistory();\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = -1,\r\n    SORT_BY_RATING = 1,\r\n    SORT_BY_SOLVE = 2,\r\n    ASCENDING = 0,\r\n    DESCENDING = 1;\r\n\r\n  const query = parseQuery(history.location.search.trim());\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    rating: { min_rating: -1, max_rating: 4000 },\r\n    tags: new Set(),\r\n    search: SEARCH in query ? query[SEARCH] : \"\",\r\n    sortBy: SORT_BY_SOLVE,\r\n    order: DESCENDING,\r\n    perPage: 100,\r\n  };\r\n\r\n  const [problemList, setProblemList] = useState({ problems: [], error: \"\" });\r\n  const [tagList, setTagList] = useState({ tags: [] });\r\n  const [randomProblem, setRandomProblem] = useState(-1);\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n\r\n  const filterProblem = (problem) => {\r\n    let containTags = false;\r\n\r\n    if (filterState.tags.size === 0) containTags = true;\r\n    else\r\n      for (let tag of problem.tags)\r\n        if (filterState.tags.has(tag)) {\r\n          containTags = true;\r\n          break;\r\n        }\r\n    let ratingInside =\r\n      problem.rating <= filterState.rating.max_rating &&\r\n      problem.rating >= filterState.rating.min_rating;\r\n    let solveStatus = filterState.solveStatus.includes(getState(problem));\r\n\r\n    let searchIncluded = true;\r\n    let text = filterState.search.toLowerCase().trim();\r\n    if (text.length)\r\n      searchIncluded =\r\n        problem.name.toLowerCase().includes(text) ||\r\n        problem.id.toLowerCase().includes(text);\r\n\r\n    return solveStatus && ratingInside && containTags && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (filterState.search.trim().length)\r\n      history.push({\r\n        pathname: PROBLEMS,\r\n        search: \"?\" + SEARCH + \"=\" + filterState.search.trim(),\r\n      });\r\n    else\r\n      history.push({\r\n        pathname: PROBLEMS,\r\n      });\r\n    if (state.problemList.problems !== undefined) {\r\n      let newState = { problems: [] };\r\n      newState.problems = state.problemList.problems;\r\n\r\n      newState.problems = newState.problems.filter((problem) =>\r\n        filterProblem(problem)\r\n      );\r\n\r\n      if (filterState.sortBy === SORT_BY_RATING)\r\n        newState.problems.sort(sortByRating);\r\n      else newState.problems.sort(sortBySolveCount);\r\n      if (filterState.order === DESCENDING) newState.problems.reverse();\r\n\r\n      let tags = [];\r\n      for (let tag of state.problemList.tags) tags.push(tag);\r\n      setTagList({ tags });\r\n      setProblemList({ ...problemList, problems: newState.problems });\r\n    }\r\n    setRandomProblem(-1);\r\n    setSelected(0);\r\n  }, [state, filterState]);\r\n\r\n  const sortList = (sortBy) => {\r\n    if (filterState.sortBy === sortBy)\r\n      setFilterState({ ...filterState, order: filterState.order ^ 1 });\r\n    else\r\n      setFilterState({\r\n        ...filterState,\r\n        ...{\r\n          order: sortBy === SORT_BY_RATING ? ASCENDING : DESCENDING,\r\n          sortBy: sortBy,\r\n        },\r\n      });\r\n  };\r\n\r\n  const getState = (problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const searchData = (e) => {\r\n    setFilterState({ ...filterState, search: e.target.value });\r\n  };\r\n\r\n  const chooseRandom = () => {\r\n    if (problemList.problems.length === 0) return;\r\n    setRandomProblem(getRandomInteger(0, problemList.problems.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * filterState.perPage;\r\n    let high = Math.min(problemList.problems.length, lo + filterState.perPage);\r\n\r\n    if (lo > high) return [];\r\n    return problemList.problems.slice(lo, high);\r\n  };\r\n\r\n  const nuetral = () => {\r\n    return <FontAwesomeIcon icon={faSort} />;\r\n  };\r\n\r\n  const less = () => {\r\n    return <FontAwesomeIcon icon={faSortUp} />;\r\n  };\r\n\r\n  const greater = () => {\r\n    return <FontAwesomeIcon icon={faSortDown} />;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"menu\">\r\n        <ul className=\"nav nav-tabs d-flex justify-content-between container border-0 mt-3\">\r\n          <li className=\"nav-item col-4\">\r\n            <form\r\n              className=\"form-inline d-flex my-2 my-lg-0\"\r\n              onSubmit={(e) => e.preventDefault()}>\r\n              <input\r\n                className=\"form-control mr-sm-2 bg-dark text-light\"\r\n                type=\"text\"\r\n                placeholder=\"Problem Name or Id\"\r\n                aria-label=\"Search\"\r\n                value={filterState.search}\r\n                onChange={(e) => {\r\n                  setFilterState({\r\n                    ...filterState,\r\n                    search: e.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </form>\r\n          </li>\r\n\r\n          <li className=\"nav-item text-secondary h-6\">\r\n            Showing {paginate().length} of {problemList.problems.length}\r\n          </li>\r\n\r\n          <li className=\"nav-item\">\r\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-dark nav-link\"\r\n                onClick={chooseRandom}\r\n                title=\"Find Random Contest\">\r\n                <FontAwesomeIcon icon={faRandom} />\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-dark nav-link\"\r\n                title=\"Cancel Random\"\r\n                onClick={() => setRandomProblem(-1)}>\r\n                <FontAwesomeIcon icon={faRedo} />\r\n              </button>\r\n            </div>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-bs-toggle=\"modal\"\r\n              data-bs-target=\"#exampleModal\">\r\n              {<FontAwesomeIcon icon={faFilter} />}\r\n            </button>\r\n            <div\r\n              className=\"modal\"\r\n              id=\"exampleModal\"\r\n              tabIndex={-1}\r\n              aria-labelledby=\"exampleModalLabel\"\r\n              aria-hidden=\"true\">\r\n              <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                      Modal title\r\n                    </h5>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn-close\"\r\n                      data-bs-dismiss=\"modal\"\r\n                      aria-label=\"Close\"></button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    <div className=\"group\">\r\n                      <form\r\n                        className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                        onSubmit={(e) => e.preventDefault()}>\r\n                        <div className=\"d-flex justify-content-between w-100\">\r\n                          <div className=\"input-group\">\r\n                            <span\r\n                              className=\"input-group-text\"\r\n                              id=\"perpage-input\">\r\n                              Per Page\r\n                            </span>\r\n                            <input\r\n                              className=\"form-control mr-sm-2\"\r\n                              type=\"number\"\r\n                              aria-label=\"perpage\"\r\n                              aria-describedby=\"perpage-input\"\r\n                              value={filterState.perPage}\r\n                              onChange={(e) =>\r\n                                setFilterState({\r\n                                  ...filterState,\r\n                                  perPage: parseInt(e.target.value),\r\n                                })\r\n                              }\r\n                            />\r\n                          </div>\r\n                          <div className=\"input-group d-flex justify-content-end\">\r\n                            <button\r\n                              className=\"btn btn-light nav-link h-6\"\r\n                              onClick={() => setFilterState(initFilterState)}\r\n                              title=\"Reset To Default State\"\r\n                             >\r\n                              <FontAwesomeIcon icon={faRedoAlt} />\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {initFilterState.solveStatus.map((solved) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.solveStatus.includes(solved)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={solved}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            let ind = filterState.solveStatus.indexOf(solved);\r\n                            if (ind != -1)\r\n                              myFilterState.solveStatus.splice(ind, 1);\r\n                            else myFilterState.solveStatus.push(solved);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {solved === SOLVED\r\n                            ? \"Solved\"\r\n                            : solved === ATTEMPTED\r\n                            ? \"Attempted\"\r\n                            : \"Unsolved\"}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                    <form\r\n                      className=\"\"\r\n                      onSubmit={(e) => {\r\n                        e.preventDefault();\r\n                      }}>\r\n                      <div className=\"d-flex\">\r\n                        <div className=\"input-group pe-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Min Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Min Rating\"\r\n                            value={filterState.rating.min_rating}\r\n                            onChange={(e) =>\r\n                              setFilterState({\r\n                                ...filterState,\r\n                                rating: {\r\n                                  ...filterState.rating,\r\n                                  min_rating: parseInt(e.target.value),\r\n                                },\r\n                              })\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <div className=\"input-group ps-1\">\r\n                          <span className=\"input-group-text\" id=\"perpage-input\">\r\n                            Max Rating\r\n                          </span>\r\n                          <input\r\n                            className=\"form-control mr-sm-2\"\r\n                            type=\"text\"\r\n                            placeholder=\"Max Rating\"\r\n                            value={filterState.rating.max_rating}\r\n                            onChange={(e) =>\r\n                              setFilterState({\r\n                                ...filterState,\r\n                                rating: {\r\n                                  ...filterState.rating,\r\n                                  max_rating: parseInt(e.target.value),\r\n                                },\r\n                              })\r\n                            }\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </form>\r\n                    <div\r\n                      className=\"btn-group me-2 d-flex flex-wrap\"\r\n                      role=\"group\"\r\n                      aria-label=\"First group\">\r\n                      {tagList.tags.map((tag) => (\r\n                        <button\r\n                          className={\r\n                            (filterState.tags.has(tag)\r\n                              ? \"btn bg-success\"\r\n                              : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                          }\r\n                          key={tag}\r\n                          onClick={() => {\r\n                            let myFilterState = { ...filterState };\r\n                            if (filterState.tags.has(tag))\r\n                              myFilterState.tags.delete(tag);\r\n                            else myFilterState.tags.add(tag);\r\n                            setFilterState(myFilterState);\r\n                          }}>\r\n                          {tag}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"p-2\">\r\n        <Pagination\r\n          totalCount={problemList.problems.length}\r\n          perPage={filterState.perPage}\r\n          selected={selected}\r\n          pageSelected={(e) => setSelected(e)}\r\n        />\r\n      </div>\r\n      <table className=\"table table-bordered table-dark container\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Name</th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_RATING)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Rating</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_RATING\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th\r\n              scope=\"col\"\r\n              role=\"button\"\r\n              onClick={() => sortList(SORT_BY_SOLVE)}>\r\n              <div className=\"d-flex justify-content-between\">\r\n                <div>Solve Count</div>\r\n                <div>\r\n                  {filterState.sortBy === SORT_BY_SOLVE\r\n                    ? filterState.order === ASCENDING\r\n                      ? less()\r\n                      : greater()\r\n                    : nuetral()}\r\n                </div>\r\n              </div>\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {randomProblem === -1 ? (\r\n            <ProblemList problems={paginate()} />\r\n          ) : (\r\n            <ProblemList problems={[problemList.problems[randomProblem]]} />\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        totalCount={problemList.problems.length}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        pageSelected={(e) => setSelected(e)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProblemPage;","F:\\web\\react\\codeforces-api\\src\\components\\home\\HomePage.tsx",["120","121"],"import React, { useEffect,useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { fetchUsers } from \"../../data/actions/userActions\";\r\nimport { CONTESTS } from \"../../util/constants\";\r\n\r\nconst HomePage = (props) => {\r\n\r\n  const [handle, setHandle] = useState(\"\");\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst history = useHistory();\r\n\thistory.push(CONTESTS);\r\n\r\n\tconst submitUser = () => {\r\n\t\tfetchUsers(dispatch,handle);\r\n\t}\r\n\r\n  useEffect(() => {\r\n    // fetchProblemList(dispatch);\r\n    // fetchContestList(dispatch);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\t\t\t{/* <form\r\n          className=\"form-inline d-flex my-2 my-lg-0\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault();\r\n            submitUser();\r\n          }}>\r\n          <input\r\n            className=\"form-control mr-sm-2\"\r\n            type=\"search\"\r\n            placeholder=\"Handle\"\r\n            aria-label=\"Search\"\r\n            value={handle}\r\n            onChange={(e) => setHandle(e.target.value)}\r\n          />\r\n        </form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestPage.tsx",["122","123","124"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getRandomInteger, parseQuery } from \"../../util/bashforces\";\r\nimport ContestList from \"./ContestList\";\r\nimport {\r\n  ATTEMPTED_CONTESTS,\r\n  CONTESTS,\r\n  SEARCH,\r\n  SOLVED_CONTESTS,\r\n} from \"../../util/constants\";\r\nimport Pagination from \"../../util/Pagination\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faFilter,\r\n  faRandom,\r\n  faRedo,\r\n  faRedoAlt,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst ContestPage = () => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const history = useHistory();\r\n\r\n  const [contestList, setContestList] = useState({ contests: [], error: \"\" });\r\n  const [randomContest, setRandomContest] = useState(-1);\r\n\r\n  const SOLVED = 1,\r\n    ATTEMPTED = 0,\r\n    UNSOLVED = 2;\r\n\r\n  const query = parseQuery(history.location.search.trim());\r\n\r\n  const initFilterState = {\r\n    solveStatus: [SOLVED, ATTEMPTED, UNSOLVED],\r\n    search: SEARCH in query ? query[SEARCH] : \"\",\r\n    showDate: 0,\r\n    perPage: 100,\r\n  };\r\n\r\n  const [filterState, setFilterState] = useState(initFilterState);\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  const contestStatus = (contestId) => {\r\n    if (state.userSubmissions[SOLVED_CONTESTS].has(contestId)) return SOLVED;\r\n    if (state.userSubmissions[ATTEMPTED_CONTESTS].has(contestId))\r\n      return ATTEMPTED;\r\n    return UNSOLVED;\r\n  };\r\n\r\n  const filterContest = (contest) => {\r\n    let solveStatus = filterState.solveStatus.includes(\r\n      contestStatus(contest.id.toString())\r\n    );\r\n\r\n    let searchIncluded = true;\r\n\r\n    let text = filterState.search.toLowerCase().trim();\r\n\r\n    if (text.length)\r\n      searchIncluded =\r\n        contest.name.toLowerCase().includes(text) ||\r\n        contest.id.toString().includes(text);\r\n\r\n    return solveStatus && searchIncluded;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (filterState.search.trim().length)\r\n      history.push({\r\n        pathname: CONTESTS,\r\n        search: \"?\" + SEARCH + \"=\" + filterState.search.trim(),\r\n      });\r\n    else\r\n      history.push({\r\n        pathname: CONTESTS,\r\n      });\r\n    let contests = state.contestList.contests;\r\n\r\n    const newContestList = contests.filter((contest) => filterContest(contest));\r\n\r\n    setContestList({ ...contestList, contests: newContestList });\r\n    setRandomContest(-1);\r\n  }, [state, filterState]);\r\n\r\n  const chooseRandom = () => {\r\n    if (contestList.contests.length === 0) return;\r\n    setRandomContest(getRandomInteger(0, contestList.contests.length - 1));\r\n  };\r\n\r\n  const paginate = () => {\r\n    let lo = selected * filterState.perPage;\r\n    let high = Math.min(contestList.contests.length, lo + filterState.perPage);\r\n\r\n    if (lo > high) return [];\r\n    return contestList.contests.slice(lo, high);\r\n  };\r\n\r\n  return (\r\n    <div className=\"div\">\r\n      <div className=\"menu\">\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark container bg-dark p-2\">\r\n          <div\r\n            className=\"collapse navbar-collapse d-flex justify-content-between\"\r\n            id=\"navbarTogglerDemo03\">\r\n            <ul className=\"navbar w-100 navbar-dark d-flex justify-content-between bg-dark list-unstyled\">\r\n              <li className=\"nav-item col-6\">\r\n                <form\r\n                  className=\"form-inline d-flex my-2 my-lg-0\"\r\n                  onSubmit={(e) => e.preventDefault()}>\r\n                  <input\r\n                    className=\"form-control bg-dark text-light mr-sm-2\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search by Contest Name or Id\"\r\n                    aria-label=\"Search\"\r\n                    value={filterState.search}\r\n                    onChange={(e) => {\r\n                      setFilterState({\r\n                        ...filterState,\r\n                        search: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </form>\r\n              </li>\r\n              <li className=\"nav-item text-secondary\">\r\n                Showing {paginate().length} of {contestList.contests.length}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <div\r\n                  className=\"btn-group\"\r\n                  role=\"group\"\r\n                  aria-label=\"Basic example\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-dark nav-link\"\r\n                    onClick={chooseRandom}\r\n                    title=\"Find Random Contest\">\r\n                    <FontAwesomeIcon icon={faRandom} />\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-dark nav-link\"\r\n                    title=\"Cancel Random\"\r\n                    onClick={() => setRandomContest(-1)}>\r\n                    <FontAwesomeIcon icon={faRedo} />\r\n                  </button>\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  data-bs-toggle=\"modal\"\r\n                  data-bs-target=\"#exampleModal\">\r\n                  {<FontAwesomeIcon icon={faFilter} />}\r\n                </button>\r\n                <div\r\n                  className=\"modal\"\r\n                  id=\"exampleModal\"\r\n                  tabIndex={-1}\r\n                  aria-labelledby=\"exampleModalLabel\"\r\n                  aria-hidden=\"true\">\r\n                  <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                      <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                          Filter\r\n                        </h5>\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"btn-close\"\r\n                          data-bs-dismiss=\"modal\"\r\n                          aria-label=\"Close\"></button>\r\n                      </div>\r\n                      <div className=\"modal-body\">\r\n                        <div className=\"group\">\r\n                          <form\r\n                            className=\"form-inline d-flex justify-content-between my-2 my-lg-0\"\r\n                            onSubmit={(e) => e.preventDefault()}>\r\n                            <div className=\"d-flex justify-content-between w-100\">\r\n                              <div className=\"input-group\">\r\n                                <span\r\n                                  className=\"input-group-text\"\r\n                                  id=\"perpage-input\">\r\n                                  Per Page:\r\n                                </span>\r\n                                <input\r\n                                  className=\"form-control mr-sm-2\"\r\n                                  type=\"number\"\r\n                                  aria-label=\"perpage\"\r\n                                  aria-describedby=\"perpage-input\"\r\n                                  value={filterState.perPage}\r\n                                  onChange={(e) => {\r\n                                    setFilterState({\r\n                                      ...filterState,\r\n                                      perPage: parseInt(\r\n                                        e.target.value.toLowerCase().trim()\r\n                                      ),\r\n                                    });\r\n                                  }}\r\n                                />\r\n                              </div>\r\n                              <div className=\"input-group d-flex justify-content-end\">\r\n                                <span\r\n                                  className=\"input-group-text\"\r\n                                  id=\"perpage-input\">\r\n                                  Show Date\r\n                                </span>\r\n                                <div className=\"input-group-text\">\r\n                                  <input\r\n                                    className=\"form-check-input mt-0\"\r\n                                    type=\"checkbox\"\r\n                                    defaultChecked={filterState.showDate == 1}\r\n                                    onChange={() =>\r\n                                      setFilterState({\r\n                                        ...filterState,\r\n                                        showDate: filterState.showDate ^ 1,\r\n                                      })\r\n                                    }\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                              <button\r\n                                className=\"btn btn-secondary nav-link m-2 h-6\"\r\n                                onClick={() => setFilterState(initFilterState)}\r\n                                title=\"Reset To Default State\">\r\n                                <FontAwesomeIcon icon={faRedoAlt} />\r\n                              </button>\r\n                            </div>\r\n                          </form>\r\n                        </div>\r\n                        <div\r\n                          className=\"btn-group d-flex flex-wrap justify-content-between\"\r\n                          role=\"group\"\r\n                          aria-label=\"First group\">\r\n                          {initFilterState.solveStatus.map((solved) => (\r\n                            <button\r\n                              className={\r\n                                (filterState.solveStatus.includes(solved)\r\n                                  ? \"btn bg-success\"\r\n                                  : \"btn bg-dark\") + \" h-6 m-1 p-1 text-light\"\r\n                              }\r\n                              key={solved}\r\n                              onClick={() => {\r\n                                let myFilterState = { ...filterState };\r\n                                let ind = filterState.solveStatus.indexOf(\r\n                                  solved\r\n                                );\r\n                                if (ind != -1)\r\n                                  myFilterState.solveStatus.splice(ind, 1);\r\n                                else myFilterState.solveStatus.push(solved);\r\n                                setFilterState(myFilterState);\r\n                              }}>\r\n                              {solved === SOLVED\r\n                                ? \"Solved\"\r\n                                : solved === ATTEMPTED\r\n                                ? \"Attempted\"\r\n                                : \"Unsolved\"}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      {/* <PaginationComponent /> */}\r\n\r\n      <Pagination\r\n        pageSelected={(e) => setSelected(e)}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        totalCount={contestList.contests.length}\r\n      />\r\n\r\n      <table className=\"table table-bordered table-dark\">\r\n        <thead className=\"thead-dark\">\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">Contest Name</th>\r\n            <th scope=\"col\">A</th>\r\n            <th scope=\"col\">B</th>\r\n            <th scope=\"col\">C</th>\r\n            <th scope=\"col\">D</th>\r\n            <th scope=\"col\">E</th>\r\n            <th scope=\"col\">F</th>\r\n            <th scope=\"col\">G</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <ContestList\r\n            contestlist={\r\n              randomContest === -1\r\n                ? paginate()\r\n                : [contestList.contests[randomContest]]\r\n            }\r\n            filterState={filterState}\r\n          />\r\n        </tbody>\r\n      </table>\r\n      <Pagination\r\n        pageSelected={(e) => setSelected(e)}\r\n        perPage={filterState.perPage}\r\n        selected={selected}\r\n        totalCount={contestList.contests.length}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContestPage;\r\n","F:\\web\\react\\codeforces-api\\src\\components\\problem\\ProblemList.tsx",["125","126"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getProblemUrl } from \"../../util/bashforces\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\nimport Problem from \"../../util/DataTypes/Problem\";\r\n\r\ninterface ProblemListProps {\r\n  problems: Problem[];\r\n}\r\n\r\nconst ProblemList = ({ problems }: ProblemListProps): JSX.Element => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const getState = (problem: Problem) => {\r\n    if (state.userSubmissions[SOLVED_PROBLEMS].has(problem.id))\r\n      return SOLVED_PROBLEMS;\r\n    if (state.userSubmissions[ATTEMPTED_PROBLEMS].has(problem.id))\r\n      return ATTEMPTED_PROBLEMS;\r\n    return \"UNSOLVED\";\r\n  };\r\n\r\n  const ProblemCard = (problem: Problem) => {\r\n    let classes = \"bg-dark\";\r\n    let problemState = getState(problem);\r\n    if (problemState === SOLVED_PROBLEMS) classes = \"bg-success\";\r\n    else if (problemState === ATTEMPTED_PROBLEMS) classes = \"bg-danger\";\r\n    return (\r\n      <tr key={problem.id}>\r\n        <td className={\"id font-weight-bold \" + classes}>{problem.id}</td>\r\n        <td className={\"name \" + classes}>\r\n          <a\r\n            className=\"text-light text-decoration-none\"\r\n            target=\"_blank\"\r\n            title={problem.tags.toString()}\r\n            href={getProblemUrl(problem.contestId, problem.index)}>\r\n            {problem.name}\r\n          </a>\r\n        </td>\r\n        <td className={\"rating \" + classes}>\r\n          {problem.rating != -1 ? problem.rating : \"Not Rated\"}\r\n        </td>\r\n\r\n        <td className={\"solvedCount \" + classes}>{problem.solvedCount}</td>\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {problems.map((problem: Problem) => {\r\n        return ProblemCard(problem);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProblemList;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\Pagination.tsx",[],"F:\\web\\react\\codeforces-api\\src\\components\\contest\\ContestList.tsx",["127","128","129"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  getProblemUrl,\r\n  formateDate,\r\n  charInc,\r\n  getContestUrl,\r\n} from \"../../util/bashforces\";\r\nimport { ATTEMPTED_PROBLEMS, SOLVED_PROBLEMS } from \"../../util/constants\";\r\n\r\ninterface con{\r\n\r\n};\r\n\r\nconst ContestList = (props) => {\r\n  const state = useSelector((state) => state);\r\n\r\n  const related = state.sharedProblems.problems;\r\n\r\n  \r\n\r\n  const getProblem = (contestId, index) => {\r\n    let l = 0,\r\n      r = state.problemList.problems.length - 1;\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (\r\n        state.problemList.problems[mid].contestId === contestId &&\r\n        state.problemList.problems[mid].index === index\r\n      )\r\n        return state.problemList.problems[mid];\r\n\r\n      if (\r\n        state.problemList.problems[mid].contestId > contestId ||\r\n        (state.problemList.problems[mid].contestId === contestId &&\r\n          state.problemList.problems[mid].index > index)\r\n      )\r\n        r = mid - 1;\r\n      else l = mid + 1;\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  const getStatus = (contestId, index, id, solveStatus) => {\r\n    let res = state.userSubmissions[solveStatus].has(id);\r\n    \r\n    if (!res) {\r\n      let sharedIndex = getSharedIndex(contestId, index);\r\n      if (sharedIndex != -1) {\r\n        for (let problem of related[sharedIndex].shared) {\r\n          res |= state.userSubmissions[solveStatus].has(problem.id);\r\n        }\r\n      }\r\n    }\r\n\r\n    return res;\r\n  };\r\n\r\n  const renderProblem = (problem) => {\r\n    let solved = getStatus(\r\n      problem.contestId,\r\n      problem.index,\r\n      problem.id,\r\n      SOLVED_PROBLEMS\r\n    );\r\n    let attempted = getStatus(\r\n      problem.contestId,\r\n      problem.index,\r\n      problem.id,\r\n      ATTEMPTED_PROBLEMS\r\n    );\r\n\r\n    let name = problem.name;\r\n    let id = problem.id;\r\n    if (name.length > 10) name = name.substring(0, 9) + \"...\";\r\n\r\n    let className =\r\n      (solved ? \"bg-success\" : attempted ? \"bg-danger\" : \"\") + \" p-1\";\r\n\r\n    return (\r\n      <td className={className} key={id}>\r\n        <a\r\n          className=\"text-light text-decoration-none\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          tabIndex={0}\r\n          data-bs-toggle=\"tooltip\"\r\n          title={problem.name + \", Rating:\" + problem.rating}\r\n          href={getProblemUrl(problem.contestId, problem.index)}>\r\n          {problem.index + \". \"}\r\n          {name}\r\n        </a>\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const getSharedIndex = (contestId, index) => {\r\n    let l = 0,\r\n      r = related.length - 1;\r\n\r\n    while (l <= r) {\r\n      let mid = l + ((r - l) >> 2);\r\n      if (related[mid].contestId === contestId && related[mid].index === index)\r\n        return mid;\r\n      if (\r\n        related[mid].contestId > contestId ||\r\n        (related[mid].contestId === contestId && related[mid].index > index)\r\n      )\r\n        r = mid - 1;\r\n      else l = mid + 1;\r\n    }\r\n\r\n    return -1;\r\n  };\r\n\r\n  const getProblemsList = (contestId, index, first = true) => {\r\n    let problem = getProblem(contestId, index);\r\n\r\n    let problems = [];\r\n    if (problem === -1) {\r\n      let problem1 = getProblem(contestId, index + \"1\");\r\n      if (problem1 === -1 && first === true) {\r\n        let sharedIndex = getSharedIndex(contestId, index);\r\n        if (sharedIndex != -1) {\r\n          for (let sharedProblem of related[sharedIndex].shared) {\r\n            let currentGetInfo = getProblemsList(\r\n              sharedProblem.contestId,\r\n              sharedProblem.index,\r\n              false\r\n            );\r\n\r\n            if (currentGetInfo.length === 1 && currentGetInfo[0] === -1)\r\n              continue;\r\n            for (let currentProblem of currentGetInfo) {\r\n              let current = { ...currentProblem };\r\n              current.contestId = contestId;\r\n              current.index = current.index.split(\"\");\r\n              current.index[0] = index.charAt(0);\r\n              current.index = current.index.join(\"\");\r\n              current.id = current.contestId.toString() + index;\r\n              problems.push(current);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        problems.push(problem1);\r\n        for (let c:number = 2; c <=3; c++) {\r\n          problem1 = getProblem(contestId, index + c.toString());\r\n          if (problem1 === -1) break;\r\n          problems.push(problem1);\r\n        }\r\n      }\r\n    } else problems.push(problem);\r\n\r\n    return problems;\r\n  };\r\n\r\n  const getInfo = (contestId, index) => {\r\n    const EMPTY = \"EMPTY bg-dark\";\r\n\r\n    let problems = getProblemsList(contestId, index);\r\n\r\n    if (problems.length === 0) {\r\n      return <td key={contestId + index} className={EMPTY}></td>;\r\n    }\r\n\r\n    if (problems.length === 1) {\r\n      return renderProblem(problems[0]);\r\n    }\r\n\r\n    if (problems.length === 2) {\r\n      return (\r\n        <td className=\"p-0\" key={contestId + index.charAt(0)}>\r\n          <table>\r\n            <tbody>\r\n              <tr className=\"inside p-0\" key={contestId + index}>\r\n                {problems.map((element) => renderProblem(element))}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </td>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <td className=\"inside p-0\" key={contestId + index}>\r\n        More than 4\r\n      </td>\r\n    );\r\n  };\r\n\r\n  const contestCard = (contest) => {\r\n    return (\r\n      <tr key={contest.id}>\r\n        <th scope=\"row\">{contest.id}</th>\r\n        <td>\r\n          <div className=\"name\">\r\n            <a\r\n              className=\"text-light text-decoration-none wrap\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              title={formateDate(contest.startTimeSeconds)}\r\n              href={getContestUrl(contest.id)}>\r\n              {contest.name}\r\n            </a>\r\n          </div>\r\n          {props.filterState.showDate ? (\r\n            <div className=\"time\">{formateDate(contest.startTimeSeconds)}</div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </td>\r\n        {[...Array(7)].map((x, i) => {\r\n          return getInfo(contest.id, charInc(\"A\", i));\r\n        })}\r\n      </tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {props.contestlist.map((contest) => {\r\n        return contestCard(contest);\r\n      })}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ContestList;\r\n","F:\\web\\react\\codeforces-api\\src\\util\\constants.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\bashforces.ts",[],"F:\\web\\react\\codeforces-api\\src\\util\\sortMethods.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\store.ts",["130","131","132","133","134"],"import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport {\r\n  problemListReducer,\r\n  contestReducer,\r\n  sharedProblemsReducer,\r\n} from \"./reducers/fetchReducers\";\r\nimport { userSubmissionsReducer, userReducer } from \"./reducers/userReducers\";\r\nimport {\r\n  SOLVED_PROBLEMS,\r\n  ATTEMPTED_PROBLEMS,\r\n  SOLVED_CONTESTS,\r\n  ATTEMPTED_CONTESTS,\r\n} from \"../util/constants\";\r\nimport { AppReducer, AppStateInterfac } from \"./reducers/appReducers\";\r\nimport Contest from \"../util/DataTypes/Contest\";\r\nimport Problem from \"../util/DataTypes/Problem\";\r\n\r\nconst submissions = {\r\n  status: \"OK\",\r\n  result: [\r\n    {\r\n      id: 105129023,\r\n      contestId: 1368,\r\n      creationTimeSeconds: 1611387508,\r\n      relativeTimeSeconds: 2147483647,\r\n      problem: {\r\n        contestId: 1368,\r\n        index: \"D\",\r\n        name: \"AND, OR and square sum\",\r\n        type: \"PROGRAMMING\",\r\n        points: 1750,\r\n        rating: 1700,\r\n        tags: [\"bitmasks\", \"greedy\", \"math\"],\r\n      },\r\n      author: {\r\n        contestId: 1368,\r\n        members: [{ handle: \"bashem\" }],\r\n        participantType: \"PRACTICE\",\r\n        ghost: false,\r\n        startTimeSeconds: 1592491500,\r\n      },\r\n      programmingLanguage: \"GNU C++14\",\r\n      verdict: \"OK\",\r\n      testset: \"TESTS\",\r\n      passedTestCount: 17,\r\n      timeConsumedMillis: 109,\r\n      memoryConsumedBytes: 1638400,\r\n    },\r\n  ],\r\n};\r\n\r\nconst middlewre = [thunk, logger];\r\n\r\nconst combinedReducers = combineReducers({\r\n  userSubmissions: userSubmissionsReducer,\r\n  problemList: problemListReducer,\r\n  contestList: contestReducer,\r\n  userList: userReducer,\r\n  sharedProblems: sharedProblemsReducer,\r\n  appState: AppReducer,\r\n});\r\n\r\nexport interface RootStateType {\r\n  userSubmissions: any;\r\n  problemList: {\r\n    problems: Problem[];\r\n    error: string;\r\n    tags: Set<string>;\r\n    loading: boolean;\r\n  };\r\n  contestList: {\r\n    contests: Contest[];\r\n    error: string;\r\n    loading: boolean;\r\n    problems: Problem[];\r\n  };\r\n\r\n  userList: any;\r\n  sharedProblems: any;\r\n  appState: AppStateInterfac;\r\n}\r\n\r\nconst newCombinedReducers = (state:any, action:any): RootStateType => {\r\n  const intermediateReducer = combinedReducers(state, action);\r\n\r\n  return {\r\n    userSubmissions: intermediateReducer.userSubmissions,\r\n    problemList: {\r\n      problems: intermediateReducer.problemList.problems,\r\n      error: intermediateReducer.problemList.error,\r\n      tags: intermediateReducer.problemList.tags,\r\n      loading: intermediateReducer.problemList.loading,\r\n    },\r\n    contestList: {\r\n      contests: intermediateReducer.contestList.contests,\r\n      error: intermediateReducer.contestList.error,\r\n      loading: intermediateReducer.contestList.loading,\r\n      problems: intermediateReducer.problemList.problems,\r\n    },\r\n    userList: intermediateReducer.userList,\r\n    sharedProblems: intermediateReducer.sharedProblems,\r\n    appState: intermediateReducer.appState,\r\n  };\r\n};\r\n\r\nconst store = createStore(\r\n  newCombinedReducers,\r\n  {},\r\n  applyMiddleware(...middlewre)\r\n);\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","F:\\web\\react\\codeforces-api\\src\\data\\reducers\\fetchReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\userReducers.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\actions\\fetchActions.ts",["135","136","137"],"import {\r\n  ERROR_FETCHING_CONTEST_LIST,\r\n  ERROR_FETCHING_PROBLEMS,\r\n  ERROR_FETCHING_SHARED_PROBLEMS,\r\n  FETCH_CONTEST_LIST,\r\n  FETCH_PROBLEM_LIST,\r\n  FETCH_SHARED_PROBLEMS,\r\n  FINISHED,\r\n  LOADING_CONTEST_LIST,\r\n  LOADING_PROBLEM_LIST,\r\n} from \"./types\";\r\n\r\nimport { jsonData } from \"../jsons/related\";\r\nimport { result } from \"lodash\";\r\nimport Problem, { ProblemStatistics } from \"../../util/DataTypes/Problem\";\r\nimport { AppDispatch } from \"../store\";\r\nimport  Contest  from \"../../util/DataTypes/Contest\";\r\n\r\nconst allContestURL = \"https://codeforces.com/api/contest.list\";\r\nconst problemSetURL = \"https://codeforces.com/api/problemset.problems\";\r\nconst sharedProblemsURL = \"../jsons/related.json\";\r\n\r\nexport const createDispatch = (type: any, message: any) => {\r\n  return {\r\n    type: type,\r\n    payload: message,\r\n  };\r\n};\r\n\r\nexport const load = (type) => {\r\n  return { type: type };\r\n};\r\n\r\nexport const fetchProblemList = (dispatch: AppDispatch) => {\r\n  dispatch(load(LOADING_PROBLEM_LIST));\r\n  //fetchSharedProblemList(dispatch);\r\n  fetch(problemSetURL)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status !== \"OK\")\r\n          return dispatch(\r\n            createDispatch(ERROR_FETCHING_PROBLEMS, \"Problem Status Failed\")\r\n          );\r\n        //   console.log(result);\r\n        let problems: Problem[] = result.result.problems;\r\n        let problemStatistics: ProblemStatistics[] =\r\n          result.result.problemStatistics;\r\n\r\n        problems = problems.filter((problem) =>\r\n          problem.contestId ? true : false\r\n        );\r\n\r\n        problemStatistics = problemStatistics.filter((problem) =>\r\n          problem.contestId ? true : false\r\n        );\r\n\r\n        for (let i = 0; i < problems.length; i++) {\r\n          problems[i].rating = problems[i].rating ?? -1;\r\n          problems[i].solvedCount = problemStatistics[i].solvedCount;\r\n          problems[i].id = problems[i].contestId.toString() + problems[i].index;\r\n        }\r\n\r\n        return dispatch(createDispatch(FETCH_PROBLEM_LIST, problems));\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        return dispatch(\r\n          createDispatch(\r\n            ERROR_FETCHING_PROBLEMS,\r\n            \"ERROR in PROBLEM LIST \" + error\r\n          )\r\n        );\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(\r\n        createDispatch(ERROR_FETCHING_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n      );\r\n    });\r\n};\r\n\r\nexport const fetchSharedProblemList = (dispatch) => {\r\n  //console.log(sharedProblemsURL);\r\n  // fetch(sharedProblemsURL)\r\n  //   .then((res) => res.json())\r\n  //   .then(\r\n  //     (result) => {\r\n  //       console.log(result);\r\n  if (jsonData != null) {\r\n    const result = jsonData;\r\n    if (result.status !== \"OK\")\r\n      return dispatch(\r\n        createDispatch(\r\n          ERROR_FETCHING_SHARED_PROBLEMS,\r\n          \"Error fetching shared problems\"\r\n        )\r\n      );\r\n    return dispatch(createDispatch(FETCH_SHARED_PROBLEMS, result.result));\r\n    //\tconsole.log(result.result.length)\r\n  } else\r\n    return dispatch(\r\n      createDispatch(ERROR_FETCHING_SHARED_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n    );\r\n  //   },\r\n  //   // Note: it's important to handle errors here\r\n  //   // instead of a catch() block so that we don't swallow\r\n  //   // exceptions from actual bugs in components.\r\n  //   (error) => {\r\n  //     return dispatch(\r\n  //       createDispatch(ERROR_FETCHING_SHARED_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n  //     );\r\n  //   }\r\n  // )\r\n  // .catch((e) => {\r\n  //     console.log(e);\r\n  //   return dispatch(\r\n  //     createDispatch(ERROR_FETCHING_SHARED_PROBLEMS, \"ERROR in PROBLEM LIST\")\r\n  //   );\r\n  //});\r\n};\r\n\r\nexport const fetchContestList = (dispatch: AppDispatch) => {\r\n  dispatch(load(LOADING_CONTEST_LIST));\r\n  fetch(allContestURL)\r\n    .then((res) => res.json())\r\n    .then(\r\n      (result) => {\r\n        if (result.status !== \"OK\")\r\n          return dispatch(createDispatch(ERROR_FETCHING_CONTEST_LIST, \"Eroor\"));\r\n        let contests: Contest[] = result.result;\r\n\r\n        contests = contests.filter((contest) => contest.phase == FINISHED);\r\n\r\n        return dispatch({\r\n          type: FETCH_CONTEST_LIST,\r\n          payload: contests,\r\n        });\r\n        //\tconsole.log(result.result.length)\r\n      },\r\n      // Note: it's important to handle errors here\r\n      // instead of a catch() block so that we don't swallow\r\n      // exceptions from actual bugs in components.\r\n      (error) => {\r\n        return dispatch(\r\n          createDispatch(\r\n            ERROR_FETCHING_CONTEST_LIST,\r\n            \"FAiled to fethc contestList \" + error\r\n          )\r\n        );\r\n      }\r\n    )\r\n    .catch((e) => {\r\n      //  console.log(e);\r\n      return dispatch(\r\n        createDispatch(\r\n          ERROR_FETCHING_CONTEST_LIST,\r\n          \"FAiled to fethc contestList\"\r\n        )\r\n      );\r\n    });\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\data\\actions\\userActions.ts",["138","139"],"import {\r\n  getUserInfoURL,\r\n  getUserSubmissionsURL,\r\n  stringToArray,\r\n} from \"../../util/bashforces\";\r\nimport { AppDispatch } from \"../store\";\r\nimport { load, createDispatch } from \"./fetchActions\";\r\nimport {\r\n  ADD_USER,\r\n  CLEAR_USERS,\r\n  ERROR_FETCHING_USER,\r\n  LOADING_USERS,\r\n  ERROR_FETCHING_USER_SUBMISSIONS,\r\n  FETCH_USER_SUBMISSIONS,\r\n  LOADING_USER_SUBMISSIONS,\r\n  CLEAR_USERS_SUBMISSIONS,\r\n} from \"./types\";\r\n\r\nexport const clearUsers = (dispatch) =>\r\n  new Promise<void>((resolve, reject) => {\r\n    dispatch({\r\n      type: CLEAR_USERS,\r\n    });\r\n    resolve();\r\n  });\r\n\r\nexport const fetchUsers = (dispatch, handle: string) => {\r\n  dispatch(load(LOADING_USERS));\r\n\r\n  clearUsers(dispatch).then(() => {\r\n    let handleArray: string[] = stringToArray(handle, \",\");\r\n    for (let handle of handleArray) {\r\n      if(handle.length === 0) continue;\r\n      dispatch({ type: ADD_USER, payload: { handle } });\r\n    }\r\n  });\r\n};\r\n\r\nexport const clearUsersSubmissions = (dispatch) => {\r\n  dispatch({\r\n    type: CLEAR_USERS_SUBMISSIONS,\r\n  });\r\n};\r\n\r\nexport const fetchUserSubmissions = (\r\n  dispatch: AppDispatch,\r\n  handles: string[],\r\n  limit ?: number\r\n) => {\r\n  let currentId = Date.now();\r\n  if (handles.length === 0) clearUsersSubmissions(dispatch);\r\n\r\n  for (let handle of handles) {\r\n    dispatch(load(LOADING_USER_SUBMISSIONS));\r\n    fetch(getUserSubmissionsURL(handle,limit))\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          if (result.status !== \"OK\")\r\n            return dispatch(\r\n              createDispatch(\r\n                ERROR_FETCHING_USER_SUBMISSIONS,\r\n                \"Failed To fetch Submissions for User with handle \" + handle\r\n              )\r\n            );\r\n          return dispatch({\r\n            type: FETCH_USER_SUBMISSIONS,\r\n            payload: { result: result.result, id: currentId },\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          return dispatch(\r\n            createDispatch(\r\n              ERROR_FETCHING_USER_SUBMISSIONS,\r\n              \"Failed To fetch Submissions for User\" + handle\r\n            )\r\n          );\r\n        }\r\n      )\r\n      .catch((e) => {\r\n        // console.log(e);\r\n        return dispatch(\r\n          createDispatch(\r\n            ERROR_FETCHING_USER_SUBMISSIONS,\r\n            \"Failed To fetch Submissions for User\" + handle\r\n          )\r\n        );\r\n      });\r\n  }\r\n};\r\n","F:\\web\\react\\codeforces-api\\src\\data\\actions\\types.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\jsons\\related.ts",[],"F:\\web\\react\\codeforces-api\\src\\data\\reducers\\appReducers.ts",["140"],"import { AppReducerType, ErrorLog } from \"../actions/types\";\r\n\r\nexport class AppStateInterfac {\r\n  errorLog: string[];\r\n  successLog: string[];\r\n  darkMode: boolean;\r\n  loaded: boolean;\r\n}\r\n\r\nconst initAppState: AppStateInterfac = {\r\n  errorLog: [],\r\n  successLog: [],\r\n  darkMode: true,\r\n  loaded: false,\r\n};\r\n\r\nexport const AppReducer = (\r\n  initState: AppStateInterfac = initAppState,\r\n  action: { type: string; message: string }\r\n) => {\r\n  switch (action.type) {\r\n    case AppReducerType.ADD_ERROR_LOG:\r\n      let newState = { ...initState };\r\n      newState.errorLog.push(action.message);\r\n      return newState;\r\n    case AppReducerType.CLEAR_ERROR_LOG:\r\n      return { ...initState, ErrorLog: new Array<string>() };\r\n    case AppReducerType.TOGGLE_THEME:\r\n      return { ...initState, darkMode: !initState.darkMode };\r\n    case AppReducerType.APP_LOADED:\r\n      return { ...initState, loaded: true };\r\n    default:\r\n      return initState;\r\n  }\r\n};\r\n",{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"141","replacedBy":"145"},{"ruleId":"143","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":6,"column":3,"nodeType":"149","messageId":"150","endLine":6,"endColumn":19},{"ruleId":"147","severity":1,"message":"151","line":7,"column":3,"nodeType":"149","messageId":"150","endLine":7,"endColumn":19},{"ruleId":"147","severity":1,"message":"152","line":8,"column":3,"nodeType":"149","messageId":"150","endLine":8,"endColumn":25},{"ruleId":"147","severity":1,"message":"153","line":11,"column":10,"nodeType":"149","messageId":"150","endLine":11,"endColumn":30},{"ruleId":"147","severity":1,"message":"154","line":22,"column":9,"nodeType":"149","messageId":"150","endLine":22,"endColumn":17},{"ruleId":"147","severity":1,"message":"155","line":1,"column":10,"nodeType":"149","messageId":"150","endLine":1,"endColumn":16},{"ruleId":"147","severity":1,"message":"156","line":2,"column":10,"nodeType":"149","messageId":"150","endLine":2,"endColumn":25},{"ruleId":"147","severity":1,"message":"157","line":6,"column":3,"nodeType":"149","messageId":"150","endLine":6,"endColumn":11},{"ruleId":"147","severity":1,"message":"158","line":7,"column":3,"nodeType":"149","messageId":"150","endLine":7,"endColumn":15},{"ruleId":"147","severity":1,"message":"159","line":8,"column":3,"nodeType":"149","messageId":"150","endLine":8,"endColumn":7},{"ruleId":"147","severity":1,"message":"160","line":15,"column":8,"nodeType":"149","messageId":"150","endLine":15,"endColumn":11},{"ruleId":"147","severity":1,"message":"161","line":23,"column":10,"nodeType":"149","messageId":"150","endLine":23,"endColumn":19},{"ruleId":"162","severity":1,"message":"163","line":34,"column":31,"nodeType":"164","messageId":"165","endLine":34,"endColumn":33},{"ruleId":"166","severity":1,"message":"167","line":38,"column":6,"nodeType":"168","endLine":38,"endColumn":8,"suggestions":"169"},{"ruleId":"162","severity":1,"message":"163","line":41,"column":31,"nodeType":"164","messageId":"165","endLine":41,"endColumn":33},{"ruleId":"166","severity":1,"message":"170","line":47,"column":6,"nodeType":"168","endLine":47,"endColumn":22,"suggestions":"171"},{"ruleId":"166","severity":1,"message":"172","line":111,"column":6,"nodeType":"168","endLine":111,"endColumn":26,"suggestions":"173"},{"ruleId":"147","severity":1,"message":"174","line":133,"column":9,"nodeType":"149","messageId":"150","endLine":133,"endColumn":19},{"ruleId":"162","severity":1,"message":"175","line":287,"column":37,"nodeType":"164","messageId":"165","endLine":287,"endColumn":39},{"ruleId":"147","severity":1,"message":"176","line":9,"column":18,"nodeType":"149","messageId":"150","endLine":9,"endColumn":27},{"ruleId":"147","severity":1,"message":"177","line":15,"column":8,"nodeType":"149","messageId":"150","endLine":15,"endColumn":18},{"ruleId":"166","severity":1,"message":"178","line":85,"column":6,"nodeType":"168","endLine":85,"endColumn":26,"suggestions":"179"},{"ruleId":"162","severity":1,"message":"163","line":215,"column":74,"nodeType":"164","messageId":"165","endLine":215,"endColumn":76},{"ruleId":"162","severity":1,"message":"175","line":251,"column":41,"nodeType":"164","messageId":"165","endLine":251,"endColumn":43},{"ruleId":"180","severity":1,"message":"181","line":31,"column":11,"nodeType":"182","endLine":35,"endColumn":68},{"ruleId":"162","severity":1,"message":"175","line":40,"column":27,"nodeType":"164","messageId":"165","endLine":40,"endColumn":29},{"ruleId":"147","severity":1,"message":"183","line":11,"column":11,"nodeType":"149","messageId":"150","endLine":11,"endColumn":14},{"ruleId":"162","severity":1,"message":"175","line":50,"column":23,"nodeType":"164","messageId":"165","endLine":50,"endColumn":25},{"ruleId":"162","severity":1,"message":"175","line":125,"column":25,"nodeType":"164","messageId":"165","endLine":125,"endColumn":27},{"ruleId":"147","severity":1,"message":"184","line":11,"column":3,"nodeType":"149","messageId":"150","endLine":11,"endColumn":18},{"ruleId":"147","severity":1,"message":"185","line":12,"column":3,"nodeType":"149","messageId":"150","endLine":12,"endColumn":21},{"ruleId":"147","severity":1,"message":"186","line":13,"column":3,"nodeType":"149","messageId":"150","endLine":13,"endColumn":18},{"ruleId":"147","severity":1,"message":"187","line":14,"column":3,"nodeType":"149","messageId":"150","endLine":14,"endColumn":21},{"ruleId":"147","severity":1,"message":"188","line":20,"column":7,"nodeType":"149","messageId":"150","endLine":20,"endColumn":18},{"ruleId":"147","severity":1,"message":"189","line":14,"column":10,"nodeType":"149","messageId":"150","endLine":14,"endColumn":16},{"ruleId":"147","severity":1,"message":"190","line":21,"column":7,"nodeType":"149","messageId":"150","endLine":21,"endColumn":24},{"ruleId":"162","severity":1,"message":"163","line":137,"column":63,"nodeType":"164","messageId":"165","endLine":137,"endColumn":65},{"ruleId":"147","severity":1,"message":"191","line":2,"column":3,"nodeType":"149","messageId":"150","endLine":2,"endColumn":17},{"ruleId":"147","severity":1,"message":"192","line":11,"column":3,"nodeType":"149","messageId":"150","endLine":11,"endColumn":22},{"ruleId":"147","severity":1,"message":"193","line":1,"column":26,"nodeType":"149","messageId":"150","endLine":1,"endColumn":34},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],["194"],["195"],"@typescript-eslint/no-unused-vars","'fetchContestList' is defined but never used.","Identifier","unusedVar","'fetchProblemList' is defined but never used.","'fetchSharedProblemList' is defined but never used.","'fetchUserSubmissions' is defined but never used.","'dispatch' is assigned a value but never used.","'faSync' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'GridList' is defined but never used.","'GridListTile' is defined but never used.","'Link' is defined but never used.","'App' is defined but never used.","'RootState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'state.appState.loaded'. Either include them or remove the dependency array.","ArrayExpression",["196"],"React Hook useEffect has missing dependencies: 'dispatch', 'state.appState.loaded', and 'sync'. Either include them or remove the dependency array.",["197"],"React Hook useEffect has missing dependencies: 'filterProblem', 'history', and 'problemList'. Either include them or remove the dependency array. You can also do a functional update 'setProblemList(p => ...)' if you only need 'problemList' in the 'setProblemList' call.",["198"],"'searchData' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'setHandle' is assigned a value but never used.","'submitUser' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'contestList', 'filterContest', and 'history'. Either include them or remove the dependency array. You can also do a functional update 'setContestList(c => ...)' if you only need 'contestList' in the 'setContestList' call.",["199"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'con' is defined but never used.","'SOLVED_PROBLEMS' is defined but never used.","'ATTEMPTED_PROBLEMS' is defined but never used.","'SOLVED_CONTESTS' is defined but never used.","'ATTEMPTED_CONTESTS' is defined but never used.","'submissions' is assigned a value but never used.","'result' is defined but never used.","'sharedProblemsURL' is assigned a value but never used.","'getUserInfoURL' is defined but never used.","'ERROR_FETCHING_USER' is defined but never used.","'ErrorLog' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [dispatch, state.appState.loaded]",{"range":"208","text":"209"},"Update the dependencies array to be: [dispatch, state.appState.loaded, state.userList, sync]",{"range":"210","text":"211"},"Update the dependencies array to be: [state, filterState, history, problemList, filterProblem]",{"range":"212","text":"213"},"Update the dependencies array to be: [state, filterState, history, contestList, filterContest]",{"range":"214","text":"215"},[1225,1227],"[dispatch, state.appState.loaded]",[1474,1490],"[dispatch, state.appState.loaded, state.userList, sync]",[3438,3458],"[state, filterState, history, problemList, filterProblem]",[2442,2462],"[state, filterState, history, contestList, filterContest]"]